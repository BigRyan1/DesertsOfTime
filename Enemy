import java.util.Scanner;

public class Enemy
{
    String reset="\n\n";
    private int health=100;
    private int damage=0;
    private int dodge=10;
    private int level=0;
    private int xp=0;
    private int gold=0;
  
    private String name="";
    private String armor="";
    public Enemy()
    {

    }

    public void DetermineEnemy(Character Hero)
    {
        if (Hero.inChamber())
        {
            int x=(int)(Math.random()*2);
            if (x==0)
            this.fightTimeKeeper(Hero);
            else
            this.fightClockWizard(Hero);
        }
        else if(Hero.inPalace())
        {
            int y=(int)(Math.random()*2);
            if (y==0)
            this.fightHenchman(Hero);
            else
            this.fightOfficer(Hero);
        }
        else if(Hero.inSandRiver())
        {
        int j=(int)(Math.random()*2);
        if (j==0)
            this.fightBehemoth(Hero);
            else
            this.fightSandSpirit(Hero);
        
        }
        else if(Hero.inOasis())
        {
            int w=(int)(Math.random()*2);
            if (w==0)
            this.fightSandSkeleton(Hero);
            else
            this.fightCobra(Hero);
        }
        else {
            int o=(int)(Math.random()*2);
            if (o==0)
            this.fightDustDevil(Hero);
            else
            this.fightStoneGoblin(Hero);
        }
    }

    public void fightDarkBeast(Character Hero)
    {
         System.out.println(reset);
        name="Shadow";
        if (Hero.getPrestige()>0)
        level =(int)((Math.random()*(2))+20)*(1+Hero.getPrestige());
        else
        level =(int)((Math.random()*2)+20);
         damage=level*2;
        health=level*2;
        dodge=level*2;
        xp=level*30;
        armor=this.determineArmor();
       
        this.battle(Hero);
        
    }
    public void fightClockWizard(Character Hero)
    {
        System.out.println(reset);
        name="Clock Wizard";
        if (Hero.getPrestige()>0)
        level = (int)((Math.random()*2)+50)*(1+Hero.getPrestige());
        else
    level =(int)((Math.random()*2)+50);
      damage=level*2;
        health=level*3;
        dodge=35;
        xp=level*15;
        gold=level;
        armor=this.determineArmor();
        System.out.println("One of the wizards behind the infinite sands casts you into battle!");
        this.battle(Hero);
    }
    
    public void fightTimeKeeper(Character Hero)
    {
        System.out.println(reset);
        name="Time Keeper";
        if (Hero.getPrestige()>0)
    level =(int)((Math.random()*2)+50)*(1+Hero.getPrestige());
    else
     level =(int)((Math.random()*2)+50);
      damage=level*2;
        health=level*3;
        dodge=35;
        xp=level*15;
        gold=level;
        armor=this.determineArmor();
        System.out.println("One of Chrono's guardsmen finds you!");
        this.battle(Hero);
    }

    public void fightHenchman(Character Hero)
    {
        System.out.println(reset);
        name="Henchman";
        if (Hero.getPrestige()>0)
      level =(int)((Math.random()*2)+30)*(1+Hero.getPrestige());
      else
      level =(int)((Math.random()*2)+30);
       damage=level*2;
        health=level*4;
        dodge=30;
        xp=level*15;
        gold=level;
        armor=this.determineArmor();
        System.out.println("A Henchman blocks your path!");
        this.battle(Hero);
    }

     public void fightOfficer(Character Hero)
    {
        System.out.println(reset);
        name="Officer";
        if (Hero.getPrestige()>0)
      level =(int)((Math.random()*2)+30)*(1+Hero.getPrestige());
      else
       level =(int)((Math.random()*2)+30);
       damage=level*2;
        health=level*4;
        dodge=30;
        xp=level*15;
        gold=level;
        armor=this.determineArmor();
        System.out.println("An officer strikes from behind!");
        this.battle(Hero);
    }
    public void fightBehemoth(Character Hero)
    {
        System.out.println(reset);
        name="Behemoth";
        if (Hero.getPrestige()>0)
        level =((int)(Math.random()*2)+20)*(1+Hero.getPrestige());
        else
        level =((int)(Math.random()*2)+20);
     damage=level*2;
        health=level*2;
        dodge=level;
        xp=level*20;
        gold=level;
        armor=this.determineArmor();
        System.out.println("You encounter a Behemoth!");
        this.battle(Hero);
    }
    public void fightSandSpirit(Character Hero)
    {
        System.out.println(reset);
        name="Sand Spirit";
        if (Hero.getPrestige()>0)
        level =((int)(Math.random()*2)+20)*(1+Hero.getPrestige());
        else
        level =((int)(Math.random()*2)+20);
     damage=level*2;
        health=level*2;
        dodge=level;
        xp=level*20;
        gold=level;
        armor=this.determineArmor();
        System.out.println("A Sand Spirit is conjured beside you!");
        this.battle(Hero);
    }

    public void fightStoneGoblin(Character Hero)
    {
        System.out.println(reset);
        name="Stone Goblin";
        if (Hero.getPrestige()>0)
        level = ((int)(Math.random()*2)+1)*(1+Hero.getPrestige());
        else
        level = ((int)(Math.random()*2)+1);
       damage=level*10;
        health=level*5;
        dodge=level*3;
        xp=level*40;
        gold=1;
        armor=this.determineArmor();
        System.out.println("You encounter a Stone Goblin!");

        this.battle(Hero);
    }
    public void fightDustDevil(Character Hero)
    {
        System.out.println(reset);
        name="Dust Devil";
        if (Hero.getPrestige()>0)
        level = ((int)(Math.random()*2)+1)*(1+Hero.getPrestige());
        else
        level = ((int)(Math.random()*2)+1);
       damage=level*10;
        health=level*5;
        dodge=level*3;
        xp=level*40;
        gold=1;
        armor=this.determineArmor();
        System.out.println("A Dust Devil startles you!");

        this.battle(Hero);
    }

    public void fightSandSkeleton(Character Hero)
    {
        System.out.println(reset);
        System.out.println("You come across a pile of sandy bones...");
        name="Sand Skeleton";
        if (Hero.getPrestige()>0)
        level =(int)((Math.random()*2)+10)*(1+Hero.getPrestige());
        else
        level =(int)((Math.random()*2)+10);
         damage=level*2;
        health=level*2;
        dodge=level*2;
        xp=level*30;
        gold=level;
        armor=this.determineArmor();
        this.battle(Hero); 

    }
    public void fightCobra(Character Hero)
    {
        System.out.println(reset);
        System.out.println("A King Cobra hisses at you!");
        name="Cobra";
        if (Hero.getPrestige()>0)
        level =(int)((Math.random()*2)+10)*(1+Hero.getPrestige());
        else
        level =(int)((Math.random()*2)+10);
         damage=level*2;
        health=level*2;
        dodge=level*2;
        xp=level*30;
        gold=level;
        armor=this.determineArmor();
        this.battle(Hero); 

    }

    public void fightChrono(Character Hero)
    {
        System.out.println(reset);
        name="Chrono";
        if (Hero.getPrestige()>0)
        {
        level=100;
        damage=400;
        health=1250;
        dodge=60;
        xp=Hero.xpNeeded()*10;
        gold=level*2;
        armor=this.determineArmor();
        System.out.println("\"I hope you are prepared for your fate. Death!\"");
        this.battle(Hero);
    }
    else
    {
        level=100;
        damage=150;
        health=500;
        dodge=45;
        xp=Hero.xpNeeded()*10;
        gold=level*2;
        armor=this.determineArmor();
        System.out.println("\"I hope you are prepared for your fate. Death!\"");
        this.battle(Hero);
    }
    }

    public void attack(Character Hero)
    {
        if ((damage-Hero.getArmor())<=0)
        {}
        else Hero.changeHealth(damage-Hero.getArmor());
        if (Hero.getHealth()<=0)
        {
            System.out.println();
            System.out.println("Fatal damage was dealt!");

        }
        else
        {

            System.out.println("The "+name+" has attacked you! "+Hero.getName()+" now has "+Hero.getHealth()+" health points.");
        }
    }

    public void battleOptions(Character Hero)
    {
        Scanner scan=new Scanner(System.in);
        int choice=0;
        boolean willdodge=false;
        if (Math.random()*100<=dodge)
            willdodge=true;
        while(choice!=1&&choice!=2&&choice!=3)
        {
            
            System.out.println("Your Battle Options:\n 1: (Melee) Slash the "+name+".\n 2: (Ranged) Shoot an arrow at the "+name+".\n3: (Magic) Blast the "+name+" with a charged fireball.");
            if (Hero.getPotions()>0)
            System.out.println("4: Drink a potion to restore 50 HP.");
            if (Hero.getHerosMixes()>0)
            System.out.println("5: Drink a Hero's Mix to double all stats for the battle duration.");
            if (Hero.hasSpecial())
       Hero.returnSpecial();
            
            choice=scan.nextInt();
            if (choice==1)
            {
                if (willdodge)
                    System.out.println("The "+name+" sidestepped your swing! No damage was dealt.");
                else{
                    this.changeHealth(Hero.determineStrength(armor));
                    if(health>0)
                    {

                        System.out.println(Hero.getName()+" dealt "+Hero.determineStrength(armor)+" damage. The "+name+" has "+health+" health points left.");
                    }
                }
                break;
            }
            else if (choice==2)
            {
                if (willdodge)
                    System.out.println("The "+name+" avoided the arrow! No damage was dealt.");
                else{
                    this.changeHealth(Hero.determineAgility(armor));
                    if(health>0)
                    {

                        System.out.println(Hero.getName()+" dealt "+Hero.determineAgility(armor)+" damage. The "+name+" has "+health+" health points left.");
                    }
                }
                break;
            }
            else if (choice==3)
            {
                 if (willdodge)
                    System.out.println("The "+name+" blocked the fireball! No damage was dealt.");
                else{
                    this.changeHealth(Hero.determineIntellect(armor));
                    if(health>0)
                    {

                        System.out.println(Hero.getName()+" dealt "+Hero.determineIntellect(armor)+" damage. The "+name+" has "+health+" health points left.");
                    }
                    break;
                }
            }
            else if(choice==4&&Hero.getPotions()>0)
            {
                Hero.drinkPotion();
                break;
            }
            else if(choice==5&&Hero.getHerosMixes()>0)
            
            {
                Hero.drinkHerosMix();
                break;
            }
            else if (choice==6&&Hero.getTsodm()>0)
            {
                if (willdodge)
                System.out.println("The "+name+" anti-spelled the Black Fireblast! No damage was dealt.");
                else {
                    this.changeHealth(Hero.blackFireBlast());
                    if (health>0)
                    System.out.println(Hero.getName()+" dealth "+Hero.blackFireBlast()+" damage. The "+name+" has"+health+" health points left.");
                }
                break;
            }
            else if (choice==7&&Hero.getDoti()>0)
            {
                 if (willdodge)
                System.out.println("The "+name+" sidestepped your lunge! No damage was dealt.");
                else {
                    this.changeHealth(Hero.gut());
                    if (health>0)
                    System.out.println(Hero.getName()+" dealth "+Hero.gut()+" damage. The "+name+" has"+health+" health points left.");
                }
                break;
            }
            else if(choice==8&&Hero.getEaoif()>0)
            {
                System.out.println("Your armor becomes granite, giving double defense....");
                Hero.brickWall();
                break;
            }
            else if (choice==9&&Hero.getWcom()>0)
            {
               if (willdodge)
                System.out.println("The "+name+" dodged the bolts! No damage was dealt.");
                else {
                    this.changeHealth(Hero.multiShot());
                    if (health>0)
                    System.out.println(Hero.getName()+" dealth "+Hero.multiShot()+" damage. The "+name+" has"+health+" health points left.");
                }
                break;
            }
            else
            {
                System.out.println("That's not an option!");
                choice=1;
            }                    
            }
        
       
    
}


    public void changeHealth(int damage)
    {
        health=health-damage;
    }

    public void lose(Character Hero)
    {
        Hero.lostLastBattle();
        System.out.println("You have died. All stats set to 0.");
        Hero.death();
    }

    public void win(Character Hero)
    {
        Hero.wonLastBattle();
        Hero.addXp(xp);
        Hero.reverseHerosMix();
        Hero.setBrickWall();
        if (name.equalsIgnoreCase("chrono"))
        {
            
            System.out.println("Congratulations! You have killed Chrono and destroyed the curse set on this world. You may prestige (1) or quit as you wish. (0)");
            Scanner scan=new Scanner(System.in);
            int x=3;
            while (x!=0&&x!=1)
            {
                x=scan.nextInt();
                switch(x)
                {
                    case 0:
                    System.exit(0);
                    break;
                    case 1:
                    Hero.baseOne();
                    break;
                    default:
                    System.out.println("Incorrect input.");
                }
            }
        }

        else {
            System.out.println("Congratulations! You defeated the "+name+"."+" You gained "+xp+" experience points.");
            System.out.println("The "+name+" dropped "+gold+" gold pieces.");
            Hero.addGold(gold);
            if (Hero.getExperience()>=Hero.xpNeeded())
                Hero.levelup();
            else{
               
                System.out.println("You need "+Hero.xpLeft()+" experience to gain the next level.");
                
            }
        }
        

    }

    public void Stats(Character Hero)
    {
        System.out.println("A Level "+level+" "+name+" wearing "+armor+" armor with "+health+" health remaining.\n"+Hero.getName()+", a level "+Hero.getLevel()+" adventurer with "+Hero.getHealth()+" health remaining.");
    }
    public int getGold()
    {
        return gold;
    }

    public void battle(Character Hero)
    {
        System.out.println();
        Hero.setHerosMix();
        Hero.setBrickWall();
        while(Hero.getHealth()>0&&health>0)
        {
            System.out.println(reset);
            this.Stats(Hero);
            battleOptions(Hero);
            if (health<=0)
            {
                this.win(Hero);
                break;
            }
            if (Hero.getBrickTicks()>0)
            {
                Hero.reduceBrickTicks();
            }
            else 
            {
                Hero.reverseBrickWall();
            }
            this.attack(Hero);
            System.out.println();

        }
        if(Hero.getHealth()<=0)
        {
            this.lose(Hero);

        }

    }

    public String determineArmor()
    {
        int y=(int)(Math.random()*3);
        if (y==0)
            return "Emerald";
        else if(y==1)
            return "Chainmail";
        else
           return "Cloth";

    }
}
